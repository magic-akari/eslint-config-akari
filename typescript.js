// THIS CODE WAS AUTOMATICALLY GENERATED
// DO NOT EDIT THIS CODE BY HAND
// YOU CAN REGENERATE IT USING npm run build

module.exports = {
    rules: {
        "accessor-pairs": "off",
        "array-callback-return": ["error", { allowImplicit: true }],
        "block-scoped-var": "error",
        "class-methods-use-this": ["error", { exceptMethods: [] }],
        curly: 0,
        "default-case": ["error", { commentPattern: "^no default$" }],
        "default-case-last": "error",
        "default-param-last": "off",
        "dot-notation": "off",
        "dot-location": "off",
        eqeqeq: ["error", "always"],
        "grouped-accessor-pairs": "error",
        "guard-for-in": "error",
        "no-alert": "warn",
        "no-caller": "error",
        "no-constructor-return": "error",
        "no-else-return": ["error", { allowElseIf: false }],
        "no-empty-pattern": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-native-reassign": "off",
        "no-implicit-coercion": ["error", { boolean: false, number: true, string: true, allow: ["!!"] }],
        "no-implicit-globals": "warn",
        "no-implied-eval": "off",
        "no-invalid-this": "off",
        "no-labels": ["error", { allowLoop: true, allowSwitch: true }],
        "no-lone-blocks": "warn",
        "no-loop-func": "off",
        "no-multi-spaces": "off",
        "no-multi-str": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-octal-escape": "error",
        "no-proto": "error",
        "no-restricted-properties": [
            "error",
            { object: "arguments", property: "callee", message: "arguments.callee is deprecated" },
            { object: "global", property: "__defineGetter__", message: "Please use Object.defineProperty instead." },
            { object: "self", property: "__defineSetter__", message: "Please use Object.defineProperty instead." },
            { object: "window", property: "isFinite", message: "Please use Number.isFinite instead" },
            { object: "global", property: "isNaN", message: "Please use Number.isNaN instead" },
            { object: "self", property: "isNaN", message: "Please use Number.isNaN instead" },
            { object: "window", property: "isNaN", message: "Please use Number.isNaN instead" },
            { object: "global", property: "parseInt", message: "Please use Number.parseInt instead" },
            { object: "self", property: "parseInt", message: "Please use Number.parseInt instead" },
            { object: "window", property: "parseInt", message: "Please use Number.parseInt instead" },
            { object: "global", property: "parseFloat", message: "Please use Number.parseFloat instead" },
            { object: "self", property: "parseFloat", message: "Please use Number.parseFloat instead" },
            { object: "window", property: "parseFloat", message: "Please use Number.parseFloat instead" },
            { property: "__defineGetter__", message: "Please use Object.defineProperty instead." },
            { property: "__defineSetter__", message: "Please use Object.defineProperty instead." },
            { object: "Math", property: "pow", message: "Use the exponentiation operator (**) instead." },
        ],
        "no-return-assign": ["error", "always"],
        "no-return-await": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-unmodified-loop-condition": "warn",
        "no-unused-expressions": "off",
        "no-useless-call": "warn",
        "no-useless-catch": "error",
        "no-useless-concat": "error",
        "no-useless-escape": "error",
        "no-useless-return": "error",
        "no-void": "error",
        "no-with": "error",
        "prefer-promise-reject-errors": ["error", { allowEmptyReject: true }],
        "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
        radix: "error",
        "require-await": "off",
        "require-unicode-regexp": "warn",
        "vars-on-top": "error",
        "wrap-iife": "off",
        yoda: ["error", "never", { exceptRange: true }],
        "no-await-in-loop": "error",
        "no-console": "warn",
        "no-constant-condition": "warn",
        "no-empty": ["error", { allowEmptyCatch: true }],
        "no-extra-parens": "off",
        "no-loss-of-precision": "off",
        "no-promise-executor-return": "error",
        "no-template-curly-in-string": "warn",
        "no-unreachable-loop": "error",
        "no-unused-vars": "off",
        "no-useless-backreference": "error",
        "no-negated-in-lhs": "off",
        "require-atomic-updates": "off",
        "use-isnan": "warn",
        "valid-jsdoc": "off",
        "valid-typeof": ["error", { requireStringLiterals: true }],
        "arrow-spacing": "off",
        "generator-star-spacing": "off",
        "no-confusing-arrow": 0,
        "no-duplicate-imports": "off",
        "no-useless-computed-key": "warn",
        "no-useless-constructor": "off",
        "no-useless-rename": ["error", { ignoreDestructuring: false, ignoreImport: false, ignoreExport: false }],
        "no-var": "error",
        "object-shorthand": ["error", "always", { ignoreConstructors: false, avoidQuotes: true }],
        "prefer-arrow-callback": ["error", { allowNamedFunctions: false, allowUnboundThis: true }],
        "prefer-const": ["error", { ignoreReadBeforeAssign: true }],
        "prefer-numeric-literals": "error",
        "prefer-reflect": "off",
        "prefer-rest-params": "error",
        "prefer-template": "off",
        "rest-spread-spacing": "off",
        "symbol-description": "error",
        "template-curly-spacing": "off",
        "yield-star-spacing": "off",
        "array-bracket-newline": "off",
        "array-element-newline": "off",
        "array-bracket-spacing": "off",
        "arrow-body-style": "off",
        "arrow-parens": "off",
        "block-spacing": "off",
        "brace-style": "off",
        camelcase: "off",
        "comma-dangle": "off",
        "comma-spacing": "off",
        "comma-style": "off",
        "computed-property-spacing": "off",
        "consistent-this": "off",
        "eol-last": "off",
        "function-call-argument-newline": "off",
        "func-call-spacing": "off",
        "function-paren-newline": "off",
        "implicit-arrow-linebreak": "off",
        indent: "off",
        "key-spacing": "off",
        "keyword-spacing": "off",
        "linebreak-style": "off",
        "lines-between-class-members": "off",
        "new-cap": [
            "error",
            {
                newIsCap: true,
                newIsCapExceptions: [],
                capIsNew: false,
                capIsNewExceptions: ["Immutable.Map", "Immutable.Set", "Immutable.List"],
            },
        ],
        "new-parens": "off",
        "no-plusplus": ["warn", { allowForLoopAfterthoughts: true }],
        "no-array-constructor": "off",
        "no-bitwise": "warn",
        "no-multi-assign": ["error"],
        "no-multiple-empty-lines": "off",
        "no-negated-condition": "off",
        "no-nested-ternary": "error",
        "no-new-object": "error",
        "no-ternary": "off",
        "no-trailing-spaces": "off",
        "no-unneeded-ternary": "error",
        "no-whitespace-before-property": "off",
        "prefer-exponentiation-operator": "error",
        "operator-linebreak": "off",
        quotes: "off",
        semi: "off",
        "semi-spacing": "off",
        "semi-style": "off",
        "space-before-blocks": "off",
        "space-before-function-paren": "off",
        "space-in-parens": "off",
        "space-infix-ops": "off",
        "space-unary-ops": "off",
        "spaced-comment": [
            "error",
            "always",
            {
                line: { exceptions: ["-", "+"], markers: ["=", "!", "/"] },
                block: { exceptions: ["-", "+"], markers: ["=", "!", ":", "::"], balanced: true },
            },
        ],
        "template-tag-spacing": "off",
        "unicode-bom": "off",
        "wrap-regex": "off",
        "no-label-var": "error",
        "no-shadow": "off",
        "no-use-before-define": "off",
        "one-var": ["warn", "never"],
        "import/first": "warn",
        "import/order": ["warn", { alphabetize: { order: "asc" } }],
        "import/prefer-default-export": "off",
        "import/no-default-export": "warn",
        "import/no-unresolved": "off",
        "@typescript-eslint/naming-convention": [
            "warn",
            { selector: "variable", format: ["camelCase", "snake_case", "UPPER_CASE", "PascalCase"] },
            {
                selector: ["variable", "parameter"],
                types: ["boolean"],
                format: ["PascalCase"],
                prefix: ["is", "should", "has", "can", "did", "will", "without", "with"],
            },
            { selector: "variable", format: null, modifiers: ["unused"], leadingUnderscore: "require" },
            { selector: "variable", modifiers: ["destructured"], format: null },
            { selector: "function", format: ["camelCase", "PascalCase"] },
            { selector: "typeLike", format: ["PascalCase"] },
        ],
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/explicit-member-accessibility": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-implicit-any-catch": "error",
        "@typescript-eslint/no-shadow": ["error", { ignoreTypeValueShadow: true }],
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-readonly-parameter-types": [
            "warn",
            { checkParameterProperties: true, ignoreInferredTypes: true },
        ],
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/require-array-sort-compare": "error",
        "@typescript-eslint/strict-boolean-expressions": "warn",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/unified-signatures": "warn",
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/dot-notation": ["error", { allowKeywords: true }],
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-invalid-this": "warn",
        "@typescript-eslint/no-loop-func": "error",
        "@typescript-eslint/no-unused-expressions": [
            "error",
            { allowShortCircuit: false, allowTernary: false, allowTaggedTemplates: false },
        ],
        "@typescript-eslint/require-await": "off",
        "@typescript-eslint/no-extra-parens": "off",
        "@typescript-eslint/no-loss-of-precision": "warn",
        "@typescript-eslint/no-unused-vars": ["error", { args: "none" }],
        "@typescript-eslint/no-duplicate-imports": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/brace-style": "off",
        "@typescript-eslint/comma-dangle": "off",
        "@typescript-eslint/comma-spacing": "off",
        "@typescript-eslint/func-call-spacing": "off",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/keyword-spacing": "off",
        "@typescript-eslint/lines-between-class-members": ["error", "always"],
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/quotes": 0,
        "@typescript-eslint/semi": "off",
        "@typescript-eslint/space-before-blocks": "off",
        "@typescript-eslint/space-before-function-paren": "off",
        "@typescript-eslint/space-infix-ops": "off",
    },
    extends: [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:prettier/recommended",
    ],
};
